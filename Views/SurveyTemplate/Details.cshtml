@using System.Security.Claims
@using Microsoft.AspNetCore.Mvc.Localization
@using CursProject.Resources
@model CursProject.Models.SurveyTemplate
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@inject IHtmlLocalizer<SharedResource> Localizer
@{
    ViewData["Title"] = Localizer["Template details"];
}

@{
    var currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    bool canManageTemplate = User.IsInRole("Administrator") || User.Identity.Name == Model.User.UserName || (Model.AllowedUsers != null && Model.AllowedUsers.Any(u => u.Id == currentUserId) || Model.IsPublic );
}

@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/survey-core/survey.core.min.js"></script>
    <script src="https://unpkg.com/survey-js-ui/survey-js-ui.min.js"></script>
    <script src="https://unpkg.com/survey-creator-core/survey-creator-core.min.js"></script>
    <script src="https://unpkg.com/survey-creator-js/survey-creator-js.min.js"></script>
    <script src="https://unpkg.com/survey-core/themes/index.min.js"></script>

    <script>
        // Initialize SurveyJS Creator in read-only mode for the General Settings tab
        var readOnlyOptions = { showLogicTab: false, isAutoSave: false };
        var surveyReadOnly = new SurveyCreator.SurveyCreator(readOnlyOptions);
        surveyReadOnly.readOnly = true;
        var jsonSchema;
        try {
        jsonSchema = JSON.parse(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.JsonSchema)));
        } catch (e) {
        console.error("JSON schema parsing error:", e);
        jsonSchema = { title: "New Poll", description: "Enter a description of the survey", elements: [] };
        }
        surveyReadOnly.JSON = jsonSchema;
        document.addEventListener("DOMContentLoaded", function () {
        var readonlyContainer = document.getElementById("surveyReadOnlyContainer");
        if (readonlyContainer) {
        surveyReadOnly.render("surveyReadOnlyContainer");
        }
        });

        // Initialize SurveyJS Creator in edit mode for the "Editable Question Set" tab
        var editOptions = { showLogicTab: true, isAutoSave: false };
        var surveyEdit = new SurveyCreator.SurveyCreator(editOptions);
        var jsonSchemaEdit;
        try {
        jsonSchemaEdit = JSON.parse(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.JsonSchema)));
        } catch (e) {
        console.error("JSON Schema parsing error (edit):", e);
        jsonSchemaEdit = { title: "New Poll", description: "Enter a description of the survey", elements: [] };
        }
        surveyEdit.JSON = jsonSchemaEdit;
        document.addEventListener("DOMContentLoaded", function () {
        var editContainer = document.getElementById("surveyEditContainer");
        if (editContainer) {
        surveyEdit.render("surveyEditContainer");
        }
        });

        // Handler for changing access in edit mode
        document.getElementById("accessSettingSelect").addEventListener("change", function () {
        var value = this.value;
        var section = document.getElementById("accessUsersSection");
        section.style.display = value === "false" ? "block" : "none";
        });


        // Handlers for buttons on the main part of the page (common for templates and responses)
        function onUserSelectChange() {
        var selectedUserId = document.getElementById("userSelect").value;
        window.location.href = '@Url.Action("Index", "User")' + '?userId=' + selectedUserId;
        }

                document.getElementById("saveTemplateChangesButton").addEventListener("click", function () {
            // Get the updated JSON schema from the surveyEdit object
            var updatedJson = JSON.stringify(surveyEdit.JSON);
            // Get the access setting value from the drop-down list (true for Public, false for Private)
            var accessSetting = document.getElementById("accessSettingSelect").value;
            // Convert the value to Boolean (if necessary)
            var isPublic = accessSetting === "true";

            $.ajax({
                url: '@Url.Action("UpdateTemplate", "SurveyTemplate")',
                type: 'POST',
                data: {
                    id: '@Model.Id',
                    jsonSchema: updatedJson,
                    isPublic: isPublic,
                    AllowedUserIds: $("#AllowedUserIds").val(),
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response.success) {
                        alert("Changes saved.");
                        location.reload();
                    } else {
                        alert("Error saving changes.");
                    }
                },
                error: function (xhr, status, error) {
                    alert("Error saving changes:" + error);
                }
            });
        });



        // Scripts for likes and comments (update comments every 5 seconds)
        function refreshComments() {
        $.ajax({
        url: '@Url.Action("GetComments", "SurveyTemplate")',
        data: { templateId: '@ViewBag.TemplateId' },
        success: function (data) {
        $("#commentsList").html(data);
        }
        });
        }
        setInterval(refreshComments, 5000);



             // Преобразуем список всех пользователей и список администраторов из ViewBag в массивы
        var allUsers = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.AllUsers));
        var adminEmails = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.AdminUserEmails));
        // Получаем id текущего пользователя
        var currentUserId = '@User.FindFirstValue(System.Security.Claims.ClaimTypes.NameIdentifier)';

        // Массив для хранения ID добавленных пользователей (инициализируем его из уже существующих, если они есть)
        var allowedUsers = [];
        // Если в таблице уже есть строки (заполненные из модели), можно инициализировать массив,
        // например, перебрав все строки таблицы:
        $("#allowedUsersTable tbody tr").each(function(){
            allowedUsers.push($(this).data("userid"));
        });

        // Обработчик для кнопки "Добавить пользователя"
        $("#addUserButton").on("click", function (e) {
            e.preventDefault();
            var emailInput = $("#addUserEmail").val().trim().toLowerCase();
            if (!emailInput) {
                alert("Please enter the user's email to add.");
                return;
            }
            // Ищем пользователя в списке по email (сравнение без учета регистра)
            var foundUser = allUsers.find(function(u) {
                return u.Email.toLowerCase() === emailInput;
            });
            if (!foundUser) {
                alert("User with this email not found.");
                return;
            }
            // Проверяем, не является ли найденный пользователь текущим
            if (foundUser.Id === currentUserId) {
                alert("You cannot add yourself to the list of allowed users.");
                return;
            }
            // Проверяем, не является ли найденный пользователь администратором (по email)
            if (adminEmails.indexOf(foundUser.Email.toLowerCase()) !== -1) {
                alert("Cannot add administrator to allowed users list.");
                return;
            }
            // Если пользователь уже добавлен
            if (allowedUsers.indexOf(foundUser.Id) !== -1) {
                alert("The user has already been added.");
                return;
            }
            // Добавляем нового пользователя в таблицу отображения
            var newRow = "<tr data-userid='" + foundUser.Id + "'><td>" + foundUser.Email + "</td><td>" + (foundUser.UserName || "") + "</td></tr>";
            $("#allowedUsersTable tbody").append(newRow);
            // Сохраняем ID пользователя в массив
            allowedUsers.push(foundUser.Id);
            // Очищаем поле ввода
            $("#addUserEmail").val("");
            // Обновляем скрытое поле AllowedUserIds
            $("#AllowedUserIds").val(allowedUsers.join(","));
            // Если необходимо, можно также обновить таблицу во вкладке "Общие настройки"
            // Например, обновив HTML соответствующего блока, либо вызвав location.reload();
        });

    </script>
}

<div class="container mt-4">
    <h2>@Model.Title</h2>
    <p>@Model.Description</p>

    <!-- Вкладки -->
    <ul class="nav nav-tabs" id="templateTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="general-tab" data-bs-toggle="tab" data-bs-target="#general" type="button" role="tab" aria-controls="general" aria-selected="true">
                @Localizer["General settings"]  
            </button>
        </li>
        @if (canManageTemplate)
        {
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="edit-tab" data-bs-toggle="tab" data-bs-target="#edit" type="button" role="tab" aria-controls="edit" aria-selected="false">
                    @Localizer["Editable set of questions"]
                </button>
            </li>

            <li class="nav-item" role="presentation">
                <button class="nav-link" id="results-tab" data-bs-toggle="tab" data-bs-target="#results" type="button" role="tab" aria-controls="results" aria-selected="false">
                    @Localizer["Results"] 
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="aggregation-tab" data-bs-toggle="tab" data-bs-target="#aggregation" type="button" role="tab" aria-controls="aggregation" aria-selected="false">
                    @Localizer["Aggregation of responses"]   
                </button>
            </li>
        }
    </ul>

    <div class="tab-content" id="templateTabsContent">
        <!-- Вкладка 1: Общие настройки -->
        <div class="tab-pane fade show active" id="general" role="tabpanel" aria-labelledby="general-tab">
            <div class="mt-3">
                <!-- SurveyJS Creator в режиме только для чтения -->
                <div id="surveyReadOnlyContainer" style="height: 500px;"></div>
            </div>
            <div class="mt-4">
                <h5>@Localizer["Access settings"]</h5>
                <div class="mb-2">
                    <label>@Localizer["Access:"]</label>
                    @if (Model.IsPublic)
                    {
                        <select class="form-select" disabled>
                            <option value="true" selected="selected">@Localizer["Public"]</option>
                        </select>
                    }
                    else
                    {
                        <select class="form-select" disabled>
                            <option value="false" selected="selected">@Localizer["Private"]</option>
                        </select>
                    }
                </div>
                @if (!Model.IsPublic)
                {
                    <h6>@Localizer["Users with access:"]</h6>
                    <table class="table table-sm table-bordered">
                        <thead>
                            <tr>
                                <th>Email</th>
                                <th>@Localizer["Name"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Model.AllowedUsers)
                            {
                                <tr>
                                    <td>@user.Email</td>
                                    <td>@user.UserName</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>

            <!-- Блок для лайков -->
            <!-- Блок для отображения лайков -->
            <div id="likesContainer" style="margin-top:20px;">
                <span>@Localizer["Likes"]: <span id="likesCount">@ViewBag.LikesCount</span></span>
                @if (User.Identity.IsAuthenticated )
                {
                    <form asp-controller="Survey" asp-action="ToggleLike" method="post" style="display:inline;">
                        <input type="hidden" name="templateId" value="@ViewBag.TemplateId" />
                        <button type="submit" class="btn btn-outline-primary">
                            @(ViewBag.UserLiked.ToString().ToLower() == "true" ? Localizer["Remove like"] : Localizer["Like"])
                        </button>
                    </form>
                }
            </div>

            <hr />


            <!-- Блок для комментариев -->
            <hr />
            <div id="commentsContainer">
                <h3>@Localizer["Comments"] </h3>
                <div id="commentsList">
                    @if (ViewBag.Comments != null)
                    {
                        foreach (var comment in ViewBag.Comments)
                        {
                            <div class="comment" style="border-bottom:1px solid #ccc; padding:5px 0;">
                                <strong>@comment.User?.UserName</strong> <small>@comment.CreatedDate.ToLocalTime().ToString("g")</small>
                                <p>@comment.CommentText</p>
                            </div>
                        }
                    }
                </div>
            </div> 

            <!-- Форма для добавления комментария (только для залогиненных пользователей) -->
            @if (User.Identity.IsAuthenticated)
            {
                <form id="commentForm" asp-controller="Survey" asp-action="AddComment" method="post">
                    <input type="hidden" name="templateId" value="@ViewBag.TemplateId" />
                    <div class="form-group">
                        <textarea name="commentText" class="form-control" placeholder="@Localizer["Add a comment"]" rows="3"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary mt-2">@Localizer["Submit a comment"]</button>
                </form>
            }
            else
            {
                <p>@Localizer["To leave a comment, please log in."]</p>
            }
        </div> 




        <!-- Вкладка 2: Редактируемый набор вопросов -->
        @if (canManageTemplate)
        {
            <div class="tab-pane fade" id="edit" role="tabpanel" aria-labelledby="edit-tab">
                <div class="mt-3">
                    <!-- SurveyJS Creator в режиме редактирования -->
                    <div id="surveyEditContainer" style="height: 500px;"></div>
                </div>
                <div class="mt-4">
                    <h5>@Localizer["Access settings"] </h5>
                    <div class="mb-2">
                        <label>Access:</label>
                        @if (Model.IsPublic)
                        {
                            <select id="accessSettingSelect" class="form-select">
                                <option value="true" selected="selected">@Localizer["Public"]</option>
                                <option value="false">@Localizer["Private"]</option>
                            </select>
                        }
                        else
                        {
                            <select id="accessSettingSelect" class="form-select">
                                <option value="true">@Localizer["Public"]</option>
                                <option value="false" selected="selected">@Localizer["Private"]</option>
                            </select>
                        }
                    </div>
                    <!-- Блок добавления пользователей, который отображается только если выбран режим Private -->
                    <div id="allowedUsersSection" style="display: @(Model.IsPublic ? "none" : "block");" class="mt-2">
                        <label>@Localizer["Enter user email to add:"]</label>
                        <div class="input-group">
                            <input type="email" id="addUserEmail" class="form-control" placeholder="@Localizer["User email"]" />
                            <button type="button" id="addUserButton" class="btn btn-sm btn-primary">@Localizer["Add"]</button>
                        </div>
                        <h6 class="mt-3">@Localizer["Users with access:"]</h6>
                        <table class="table table-sm table-bordered" id="allowedUsersTable">
                            <thead>
                                <tr>
                                    <th>Email</th>
                                    <th>@Localizer["Name"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.AllowedUsers != null)
                                {
                                    foreach (var user in Model.AllowedUsers)
                                    {
                                        <tr data-userid="@user.Id">
                                            <td>@user.Email</td>
                                            <td>@user.UserName</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <!-- Скрытое поле для передачи списка ID разрешённых пользователей -->
                        <input type="hidden" id="AllowedUserIds" name="AllowedUserIds" value="" />
                    </div>
                    <button class="btn btn-success mt-3" id="saveTemplateChangesButton">@Localizer["Save changes"] </button>
                    <form asp-action="Delete" method="post" onsubmit="return confirm('@Localizer["Are you sure you want to delete the template?"]');" class="mt-3">
                        <input type="hidden" name="id" value="@Model.Id" />
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger">@Localizer["Delete template"]</button>
                    </form>
                </div>
            </div>
        }
        @if (canManageTemplate)
        {
            <!-- Вкладка 3: Результаты -->
            <div class="tab-pane fade" id="results" role="tabpanel" aria-labelledby="results-tab">
                <div class="mt-3">
                    <h5>@Localizer["List of completed forms"]</h5>
                    <table class="table table-striped table-hover" id="resultsTable">
                        <thead class="table-light">
                            <tr>
                                <th>@Localizer["Form"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var response in Model.Responses)
                            {
                                <tr>
                                    <td>
                                        <a href="@Url.Action("ViewResponse", "SurveyTemplate", new { id = response.Id })">
                                            @Localizer["Form"] №@response.Id, filled @response.SubmittedDate.ToLocalTime().ToString("g")
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }

        @if (canManageTemplate)
        {
            <!-- Вкладка 4: Агрегация ответов -->
            <div class="tab-pane fade" id="aggregation" role="tabpanel" aria-labelledby="aggregation-tab">
                <div class="mt-3">
                    <h5>@Localizer["Aggregation of responses"] </h5>
                    <!-- Здесь можно вывести агрегированные данные, например: -->
                    <p>@Localizer["Average for numerical questions:"]...</p>
                    <p>@Localizer["The most common answer for text questions is:"] ...</p>
                </div>
            </div>
        }

    </div>
</div>
